{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddr",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "carplate",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "streetAddress",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "evidenceLink",
						"type": "string"
					}
				],
				"name": "DangerousReported",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					}
				],
				"name": "DriverAcquitted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "accepted",
						"type": "bool"
					}
				],
				"name": "ReportVerified",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "REWARD_AMOUNT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "_iAmNotGuilty",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					}
				],
				"name": "acquitDriver",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "carplate",
						"type": "string"
					}
				],
				"name": "checkCarPlate",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "caseId",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "carplate",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "streetAddress",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "evidenceLink",
								"type": "string"
							},
							{
								"internalType": "bool",
								"name": "isOpen",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "accepted",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "reporter",
								"type": "address"
							}
						],
						"internalType": "struct DDR.CaseRecord[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "carplate",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "streetAddress",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "evidenceLink",
						"type": "string"
					}
				],
				"name": "report",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "caseId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isAccepted",
						"type": "bool"
					}
				],
				"name": "verify",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"acquitDriver(uint256)": {
					"params": {
						"caseId": "The unique identifier of the report to acquit."
					}
				},
				"checkCarPlate(string)": {
					"params": {
						"carplate": "The car plate number to check."
					},
					"returns": {
						"_0": "offenses An array of CaseRecord structs representing the offenses."
					}
				},
				"report(string,string,string)": {
					"returns": {
						"_0": "caseId A unique identifier for the report."
					}
				},
				"verify(uint256,bool)": {
					"params": {
						"caseId": "The unique identifier of the report to verify.",
						"isAccepted": "A boolean indicating whether the evidence is accepted."
					},
					"returns": {
						"_0": "success A boolean indicating if the verification succeeded."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acquitDriver(uint256)": {
					"notice": "Acquit (retract) an offense record in case of mistake or insufficient evidence. The token reward that has been distributed will not be returned. Only the contract owner can perform this action."
				},
				"checkCarPlate(string)": {
					"notice": "Check the list of verified, accepted offenses associated with a car plate. Cases that have been acquitted are removed from the offense list."
				},
				"report(string,string,string)": {
					"notice": "Report a dangerous driver by providing car plate, street address, and evidence link."
				},
				"verify(uint256,bool)": {
					"notice": "Verify a report (only callable by the contract owner). If the evidence is accepted, the reporter is rewarded 1 DD token. The report is then closed for further modification."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DDR2.sol": "DDR"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"contracts/DDR2.sol": {
			"keccak256": "0x51cbc6a14fddf8b86d4a24f79eea4d2fd07c7c0bc6c13d2f41d44ff13d9748bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://dffc5b395f7d17a78b24c8c140662a3a24453b43c458d372b9b530eec2b9175e",
				"dweb:/ipfs/QmXSHzQ8vv25ukmjt87RLxrwiHh5kjRaf2bX65bVQQYGgV"
			]
		}
	},
	"version": 1
}